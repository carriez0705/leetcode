#include<vector>
#include<string>
#include<iostream>

using namespace std;
void reconstruct(string &x, string &y, vector<vector<int> > &d, int i, int j){
	if(i==0 ||j==0)
		return;
	if(d[i][j]==2){
		reconstruct(x,y,d,i-1,j-1);
		cout<<x[i-1];
	}
	else if(d[i][j]==1)
		reconstruct(x,y,d,i-1,j);
	else
		reconstruct(x,y,d,i,j-1);
}
int lcs(string x, string y){
	if(x.length()<y.length())
		return lcs(y,x);
	vector<vector<int> > c(x.length()+1);
	vector<vector<int> > d(x.length()+1);
	//0:-> horizontal 1:vertical 2:diagnal
	for(int i = 0; i<x.length()+1; i++)
		for(int j = 0; j<y.length()+1; j++){
			d[i].push_back(0);
			c[i].push_back(0);
		}
	for(int i = 0; i<x.length();i++)
		for(int j = 0;j<y.length();j++){
			if(x[i]==y[j]){
				c[i+1][j+1]=c[i][j]+1;
				d[i+1][j+1] = 2;
			}
			else if(c[i][j+1]>c[i+1][j]){
				c[i+1][j+1] = c[i][j+1];
				d[i+1][j+1] = 1;
			}
			else{
				c[i+1][j+1] = c[i+1][j];
				d[i+1][j+1] = 0;
			}
		}
		reconstruct(x,y,d,x.length(),y.length());
		return c[x.length()][y.length()];
}
int lcs_b(string &x, string &y){
	if(x.length()<y.length())
		return lcs_b(y,x);
	vector<int> c(y.length());
	vector<vector<int> > d(x.length()+1);
	for(int i = 0; i<x.length()+1; i++)
		for(int j = 0; j<y.length()+1; j++)
			d[i].push_back(0);
	int left = 0;
	int diagnal = 0;
	for(int i = 0; i<x.length(); i++)
		for(int j = 0; j<y.length(); j++){
			if(j==0) diagnal = 0;
			int old = c[j];
			left = (j==0)? 0 : c[j-1];
			if(x[i]==y[j]){
				c[j]= diagnal +1;
				d[i+1][j+1] = 2;
			}
			else if(left<c[j]){
				d[i+1][j+1] =1;
			}
			else{
				c[j] = left;
				d[i+1][j+1] = 0;
			}
			diagnal = old;
		}
		reconstruct(x,y,d,x.length(),y.length());
		return c[y.length()-1];
}
void lcs_ll(string x, string y, vector<int> &c){
	int m = x.length();
	int n = y.length();
	int left = 0;
	int diagnal = 0;
	for(int i = 0; i<m; i++)
		for(int j = 0; j<n; j++){
			if(j==0) diagnal = 0;
			int old = c[j+1];
			if(x[i]==y[j])
				c[j+1] = diagnal +1;
			else if(c[j] > c[j+1])
				c[j+1] = c[j];
			diagnal = old;
		}
}
int partitiony(vector<int> &ll1, vector<int> &ll2){
	int n = ll1.size();
	int maxc = 0;
	int p = 0;
	for(int j = 0; j<n; j++){
		if(ll1[j]+ll2[n-1-j] > maxc){
			maxc = ll1[j]+ll2[n-1-j];
			p = j;
		}
	}
	return p;
}
void lcs_c(string x,string y, string &d){
	int m = x.length();
	int n = y.length();
	if(m==0)
		return;
	if(m==1){
		for(int i = 0; i<n; i++)
			if(y[i]==x[0]){
				d.push_back(y[i]);
				return;
			}
		return;
	}
	int mid = m/2;
	vector<int> ll1(y.length()+1);
	vector<int> ll2(y.length()+1);
	lcs_ll(x.substr(0,mid),y,ll1);
	string s1;
	s1.assign(x.rbegin(),x.rbegin()+m-mid);
	string s2;
	s2.assign(y.rbegin(),y.rend());
	lcs_ll(s1,s2,ll2);
	int p = partitiony(ll1,ll2);
	lcs_c(x.substr(0,mid),y.substr(0,p),d);
	lcs_c(x.substr(mid,-mid), y.substr(p,n-p),d);
}
int main(){
	string x = "abcde";
	string y = "bde";
	
	//int maxlen = lcs(x,y);
	//int maxlen = lcs_b(x,y);
	//cout<<maxlen;
	string d;
	lcs_c(x,y,d);
	cout<<d;
	getchar();
	getchar();
	return 0;
}
